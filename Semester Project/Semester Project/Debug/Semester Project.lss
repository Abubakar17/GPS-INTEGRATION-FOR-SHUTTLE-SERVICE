
Semester Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  00000bec  00000c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000035  0080008e  0080008e  00000cae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ce0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf9  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b8  00000000  00000000  000019bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ac  00000000  00000000  00001c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  00002024  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000493  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c36  00000000  00000000  00002717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000334d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 ca 03 	jmp	0x794	; 0x794 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 38       	cpi	r26, 0x8E	; 142
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e8       	ldi	r26, 0x8E	; 142
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3c       	cpi	r26, 0xC3	; 195
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 04 	call	0x898	; 0x898 <main>
  8a:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z11LCD_Commandh>:
unsigned char GGA_CODE[3];		//array of characters to identify the GGA string


void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
  92:	98 b3       	in	r25, 0x18	; 24
  94:	28 2f       	mov	r18, r24
  96:	20 7f       	andi	r18, 0xF0	; 240
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
  9e:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);		/* Enable pulse */
  a0:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  a4:	c1 98       	cbi	0x18, 1	; 24
  a6:	32 e4       	ldi	r19, 0x42	; 66
  a8:	3a 95       	dec	r19
  aa:	f1 f7       	brne	.-4      	; 0xa8 <_Z11LCD_Commandh+0x16>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_Z11LCD_Commandh+0x1c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
  ae:	28 b3       	in	r18, 0x18	; 24
  b0:	30 e1       	ldi	r19, 0x10	; 16
  b2:	83 9f       	mul	r24, r19
  b4:	c0 01       	movw	r24, r0
  b6:	11 24       	eor	r1, r1
  b8:	92 2f       	mov	r25, r18
  ba:	9f 70       	andi	r25, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
  c0:	c1 9a       	sbi	0x18, 1	; 24
  c2:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  c4:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	83 ef       	ldi	r24, 0xF3	; 243
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	f1 f7       	brne	.-4      	; 0xca <_Z11LCD_Commandh+0x38>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_Z11LCD_Commandh+0x3e>
  d0:	00 00       	nop
  d2:	08 95       	ret

000000d4 <_Z8LCD_Charh>:
	_delay_ms(2);
}

void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	28 2f       	mov	r18, r24
  d8:	20 7f       	andi	r18, 0xF0	; 240
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	92 2b       	or	r25, r18
  de:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
  e0:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
  e2:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e4:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	32 e4       	ldi	r19, 0x42	; 66
  ea:	3a 95       	dec	r19
  ec:	f1 f7       	brne	.-4      	; 0xea <_Z8LCD_Charh+0x16>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_Z8LCD_Charh+0x1c>

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
  f0:	28 b3       	in	r18, 0x18	; 24
  f2:	30 e1       	ldi	r19, 0x10	; 16
  f4:	83 9f       	mul	r24, r19
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	92 2f       	mov	r25, r18
  fc:	9f 70       	andi	r25, 0x0F	; 15
  fe:	89 2b       	or	r24, r25
 100:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
 102:	c1 9a       	sbi	0x18, 1	; 24
 104:	00 00       	nop
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
 106:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 108:	83 ef       	ldi	r24, 0xF3	; 243
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <_Z8LCD_Charh+0x38>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_Z8LCD_Charh+0x3e>
 112:	00 00       	nop
 114:	08 95       	ret

00000116 <_Z8LCD_Initv>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 bb       	out	0x17, r24	; 23
 11a:	87 e8       	ldi	r24, 0x87	; 135
 11c:	93 e1       	ldi	r25, 0x13	; 19
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <_Z8LCD_Initv+0x8>
 122:	00 c0       	rjmp	.+0      	; 0x124 <_Z8LCD_Initv+0xe>
 124:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
 12c:	88 e2       	ldi	r24, 0x28	; 40
 12e:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	LCD_Command(0x0c);              /* Display on cursor off*/
 132:	8c e0       	ldi	r24, 0x0C	; 12
 134:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	LCD_Command(0x01);              /* Clear display screen*/
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
 144:	83 ef       	ldi	r24, 0xF3	; 243
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <_Z8LCD_Initv+0x32>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_Z8LCD_Initv+0x38>
 14e:	00 00       	nop
 150:	08 95       	ret

00000152 <_Z10LCD_StringPc>:
	_delay_ms(2);
}

void LCD_String (char *str)		/* Send string to LCD function */
{
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 158:	88 81       	ld	r24, Y
 15a:	88 23       	and	r24, r24
 15c:	31 f0       	breq	.+12     	; 0x16a <_Z10LCD_StringPc+0x18>
 15e:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 160:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z8LCD_Charh>
}

void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <_Z10LCD_StringPc+0xe>
	{
		LCD_Char (str[i]);
	}
}
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <_Z10LCD_StringPh>:

void LCD_String (unsigned char *str)		/* Send string to LCD function */
{
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 176:	88 81       	ld	r24, Y
 178:	88 23       	and	r24, r24
 17a:	31 f0       	breq	.+12     	; 0x188 <_Z10LCD_StringPh+0x18>
 17c:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
 17e:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z8LCD_Charh>
}

void LCD_String (unsigned char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
 182:	89 91       	ld	r24, Y+
 184:	81 11       	cpse	r24, r1
 186:	fb cf       	rjmp	.-10     	; 0x17e <_Z10LCD_StringPh+0xe>
	{
		LCD_Char (str[i]);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	08 95       	ret

0000018e <_Z9LCD_Clearv>:
	LCD_String(str);		/* Call LCD string function */
}

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
 194:	83 ef       	ldi	r24, 0xF3	; 243
 196:	91 e0       	ldi	r25, 0x01	; 1
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z9LCD_Clearv+0xa>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_Z9LCD_Clearv+0x10>
 19e:	00 00       	nop
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 1a0:	80 e8       	ldi	r24, 0x80	; 128
 1a2:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
 1a6:	08 95       	ret

000001a8 <_Z6to_intc>:
}

int to_int (char count){
	if (count=='0') return 0;
 1a8:	80 33       	cpi	r24, 0x30	; 48
 1aa:	a9 f0       	breq	.+42     	; 0x1d6 <_Z6to_intc+0x2e>
	else if (count=='1') return 1;
 1ac:	81 33       	cpi	r24, 0x31	; 49
 1ae:	b1 f0       	breq	.+44     	; 0x1dc <_Z6to_intc+0x34>
	else if (count=='2') return 2;
 1b0:	82 33       	cpi	r24, 0x32	; 50
 1b2:	b9 f0       	breq	.+46     	; 0x1e2 <_Z6to_intc+0x3a>
	else if (count=='3') return 3;
 1b4:	83 33       	cpi	r24, 0x33	; 51
 1b6:	c1 f0       	breq	.+48     	; 0x1e8 <_Z6to_intc+0x40>
	else if (count=='4') return 4;
 1b8:	84 33       	cpi	r24, 0x34	; 52
 1ba:	c9 f0       	breq	.+50     	; 0x1ee <_Z6to_intc+0x46>
	else if (count=='5') return 5;
 1bc:	85 33       	cpi	r24, 0x35	; 53
 1be:	d1 f0       	breq	.+52     	; 0x1f4 <_Z6to_intc+0x4c>
	else if (count=='6') return 6;
 1c0:	86 33       	cpi	r24, 0x36	; 54
 1c2:	d9 f0       	breq	.+54     	; 0x1fa <_Z6to_intc+0x52>
	else if (count=='7') return 7;
 1c4:	87 33       	cpi	r24, 0x37	; 55
 1c6:	e1 f0       	breq	.+56     	; 0x200 <_Z6to_intc+0x58>
	else if (count=='8') return 8;
 1c8:	88 33       	cpi	r24, 0x38	; 56
 1ca:	e9 f0       	breq	.+58     	; 0x206 <_Z6to_intc+0x5e>
	else if (count=='9') return 9;
 1cc:	89 33       	cpi	r24, 0x39	; 57
 1ce:	f1 f0       	breq	.+60     	; 0x20c <_Z6to_intc+0x64>
	else return 0;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
}

int to_int (char count){
	if (count=='0') return 0;
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	08 95       	ret
	else if (count=='1') return 1;
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	08 95       	ret
	else if (count=='2') return 2;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	08 95       	ret
	else if (count=='3') return 3;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	08 95       	ret
	else if (count=='4') return 4;
 1ee:	84 e0       	ldi	r24, 0x04	; 4
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	08 95       	ret
	else if (count=='5') return 5;
 1f4:	85 e0       	ldi	r24, 0x05	; 5
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	08 95       	ret
	else if (count=='6') return 6;
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	08 95       	ret
	else if (count=='7') return 7;
 200:	87 e0       	ldi	r24, 0x07	; 7
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	08 95       	ret
	else if (count=='8') return 8;
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	08 95       	ret
	else if (count=='9') return 9;
 20c:	89 e0       	ldi	r24, 0x09	; 9
 20e:	90 e0       	ldi	r25, 0x00	; 0
	else return 0;
}
 210:	08 95       	ret

00000212 <_Z10lat_to_degv>:

void lat_to_deg(){
 212:	2f 92       	push	r2
 214:	3f 92       	push	r3
 216:	4f 92       	push	r4
 218:	5f 92       	push	r5
 21a:	6f 92       	push	r6
 21c:	7f 92       	push	r7
 21e:	8f 92       	push	r8
 220:	9f 92       	push	r9
 222:	af 92       	push	r10
 224:	bf 92       	push	r11
 226:	cf 92       	push	r12
 228:	df 92       	push	r13
 22a:	ef 92       	push	r14
 22c:	ff 92       	push	r15
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	cd b7       	in	r28, 0x3d	; 61
 238:	de b7       	in	r29, 0x3e	; 62
 23a:	28 97       	sbiw	r28, 0x08	; 8
 23c:	0f b6       	in	r0, 0x3f	; 63
 23e:	f8 94       	cli
 240:	de bf       	out	0x3e, r29	; 62
 242:	0f be       	out	0x3f, r0	; 63
 244:	cd bf       	out	0x3d, r28	; 61
 246:	44 24       	eor	r4, r4
 248:	43 94       	inc	r4
 24a:	51 2c       	mov	r5, r1
	long long int lat_int = 0;
 24c:	19 82       	std	Y+1, r1	; 0x01
 24e:	1a 82       	std	Y+2, r1	; 0x02
 250:	1b 82       	std	Y+3, r1	; 0x03
 252:	1c 82       	std	Y+4, r1	; 0x04
 254:	1d 82       	std	Y+5, r1	; 0x05
 256:	1e 82       	std	Y+6, r1	; 0x06
 258:	1f 82       	std	Y+7, r1	; 0x07
 25a:	18 86       	std	Y+8, r1	; 0x08
 25c:	03 c0       	rjmp	.+6      	; 0x264 <_Z10lat_to_degv+0x52>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	42 1a       	sub	r4, r18
 262:	52 0a       	sbc	r5, r18
	for (int i = 0;i < 10;i++){
		if (i != 4){
 264:	35 e0       	ldi	r19, 0x05	; 5
 266:	43 16       	cp	r4, r19
 268:	51 04       	cpc	r5, r1
 26a:	c9 f3       	breq	.-14     	; 0x25e <_Z10lat_to_degv+0x4c>
			lat_int = (lat_int*10) + to_int(Lat[i]);
 26c:	29 81       	ldd	r18, Y+1	; 0x01
 26e:	3a 81       	ldd	r19, Y+2	; 0x02
 270:	4b 81       	ldd	r20, Y+3	; 0x03
 272:	5c 81       	ldd	r21, Y+4	; 0x04
 274:	6d 81       	ldd	r22, Y+5	; 0x05
 276:	7e 81       	ldd	r23, Y+6	; 0x06
 278:	8f 81       	ldd	r24, Y+7	; 0x07
 27a:	98 85       	ldd	r25, Y+8	; 0x08
 27c:	01 e0       	ldi	r16, 0x01	; 1
 27e:	0e 94 82 05 	call	0xb04	; 0xb04 <__ashldi3>
 282:	62 2e       	mov	r6, r18
 284:	73 2e       	mov	r7, r19
 286:	84 2e       	mov	r8, r20
 288:	95 2e       	mov	r9, r21
 28a:	b6 2f       	mov	r27, r22
 28c:	a7 2f       	mov	r26, r23
 28e:	f8 2f       	mov	r31, r24
 290:	e9 2f       	mov	r30, r25
 292:	02 e0       	ldi	r16, 0x02	; 2
 294:	0e 94 82 05 	call	0xb04	; 0xb04 <__ashldi3>
 298:	a2 2e       	mov	r10, r18
 29a:	b3 2e       	mov	r11, r19
 29c:	c4 2e       	mov	r12, r20
 29e:	d5 2e       	mov	r13, r21
 2a0:	e6 2e       	mov	r14, r22
 2a2:	f7 2e       	mov	r15, r23
 2a4:	08 2f       	mov	r16, r24
 2a6:	19 2f       	mov	r17, r25
 2a8:	26 2d       	mov	r18, r6
 2aa:	37 2d       	mov	r19, r7
 2ac:	48 2d       	mov	r20, r8
 2ae:	59 2d       	mov	r21, r9
 2b0:	6b 2f       	mov	r22, r27
 2b2:	7a 2f       	mov	r23, r26
 2b4:	8f 2f       	mov	r24, r31
 2b6:	9e 2f       	mov	r25, r30
 2b8:	0e 94 9b 05 	call	0xb36	; 0xb36 <__adddi3>
 2bc:	72 2e       	mov	r7, r18
 2be:	83 2e       	mov	r8, r19
 2c0:	94 2e       	mov	r9, r20
 2c2:	c5 2e       	mov	r12, r21
 2c4:	d6 2e       	mov	r13, r22
 2c6:	e7 2e       	mov	r14, r23
 2c8:	f8 2e       	mov	r15, r24
 2ca:	09 2f       	mov	r16, r25
 2cc:	f2 01       	movw	r30, r4
 2ce:	e0 59       	subi	r30, 0x90	; 144
 2d0:	ff 4f       	sbci	r31, 0xFF	; 255
 2d2:	80 81       	ld	r24, Z
 2d4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z6to_intc>
 2d8:	b9 2e       	mov	r11, r25
 2da:	a8 2e       	mov	r10, r24
 2dc:	19 2f       	mov	r17, r25
 2de:	11 0f       	add	r17, r17
 2e0:	11 0b       	sbc	r17, r17
 2e2:	27 2d       	mov	r18, r7
 2e4:	38 2d       	mov	r19, r8
 2e6:	49 2d       	mov	r20, r9
 2e8:	5c 2d       	mov	r21, r12
 2ea:	6d 2d       	mov	r22, r13
 2ec:	7e 2d       	mov	r23, r14
 2ee:	8f 2d       	mov	r24, r15
 2f0:	90 2f       	mov	r25, r16
 2f2:	c1 2e       	mov	r12, r17
 2f4:	d1 2e       	mov	r13, r17
 2f6:	e1 2e       	mov	r14, r17
 2f8:	f1 2e       	mov	r15, r17
 2fa:	01 2f       	mov	r16, r17
 2fc:	0e 94 9b 05 	call	0xb36	; 0xb36 <__adddi3>
 300:	29 83       	std	Y+1, r18	; 0x01
 302:	3a 83       	std	Y+2, r19	; 0x02
 304:	4b 83       	std	Y+3, r20	; 0x03
 306:	5c 83       	std	Y+4, r21	; 0x04
 308:	6d 83       	std	Y+5, r22	; 0x05
 30a:	7e 83       	std	Y+6, r23	; 0x06
 30c:	8f 83       	std	Y+7, r24	; 0x07
 30e:	98 87       	std	Y+8, r25	; 0x08
	else return 0;
}

void lat_to_deg(){
	long long int lat_int = 0;
	for (int i = 0;i < 10;i++){
 310:	4a e0       	ldi	r20, 0x0A	; 10
 312:	44 16       	cp	r4, r20
 314:	51 04       	cpc	r5, r1
 316:	0c f4       	brge	.+2      	; 0x31a <_Z10lat_to_degv+0x108>
 318:	a2 cf       	rjmp	.-188    	; 0x25e <_Z10lat_to_degv+0x4c>
		}
		else{
			//do nothing
		}
	}
	int deg = lat_int/10000000;
 31a:	68 94       	set
 31c:	aa 24       	eor	r10, r10
 31e:	a7 f8       	bld	r10, 7
 320:	0f 2e       	mov	r0, r31
 322:	f6 e9       	ldi	r31, 0x96	; 150
 324:	bf 2e       	mov	r11, r31
 326:	f0 2d       	mov	r31, r0
 328:	0f 2e       	mov	r0, r31
 32a:	f8 e9       	ldi	r31, 0x98	; 152
 32c:	cf 2e       	mov	r12, r31
 32e:	f0 2d       	mov	r31, r0
 330:	d1 2c       	mov	r13, r1
 332:	e1 2c       	mov	r14, r1
 334:	f1 2c       	mov	r15, r1
 336:	00 e0       	ldi	r16, 0x00	; 0
 338:	10 e0       	ldi	r17, 0x00	; 0
 33a:	4b 81       	ldd	r20, Y+3	; 0x03
 33c:	0e 94 ad 04 	call	0x95a	; 0x95a <__divdi3>
 340:	a2 2f       	mov	r26, r18
 342:	b3 2f       	mov	r27, r19
 344:	c2 2e       	mov	r12, r18
 346:	d3 2e       	mov	r13, r19
	long int min = (lat_int - (deg*10000000));
 348:	20 e8       	ldi	r18, 0x80	; 128
 34a:	39 e6       	ldi	r19, 0x69	; 105
 34c:	47 e6       	ldi	r20, 0x67	; 103
 34e:	5f ef       	ldi	r21, 0xFF	; 255
 350:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 354:	29 81       	ldd	r18, Y+1	; 0x01
 356:	3a 81       	ldd	r19, Y+2	; 0x02
 358:	4b 81       	ldd	r20, Y+3	; 0x03
 35a:	5c 81       	ldd	r21, Y+4	; 0x04
 35c:	62 0f       	add	r22, r18
 35e:	73 1f       	adc	r23, r19
 360:	84 1f       	adc	r24, r20
 362:	95 1f       	adc	r25, r21
	min = min / 60;
 364:	2c e3       	ldi	r18, 0x3C	; 60
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	40 e0       	ldi	r20, 0x00	; 0
 36a:	50 e0       	ldi	r21, 0x00	; 0
 36c:	0e 94 84 04 	call	0x908	; 0x908 <__divmodsi4>
 370:	49 01       	movw	r8, r18
 372:	5a 01       	movw	r10, r20
 374:	0f 2e       	mov	r0, r31
 376:	f8 eb       	ldi	r31, 0xB8	; 184
 378:	ef 2e       	mov	r14, r31
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	ff 2e       	mov	r15, r31
 37e:	f0 2d       	mov	r31, r0
 380:	01 e0       	ldi	r16, 0x01	; 1
 382:	10 e0       	ldi	r17, 0x00	; 0
 384:	1a 82       	std	Y+2, r1	; 0x02
 386:	19 82       	std	Y+1, r1	; 0x01
			Latitude_in_deg[i] = '.';
		}
		else{
			min = min*10;
			temp = min/100000;
			min = min%100000;
 388:	0f 2e       	mov	r0, r31
 38a:	f0 ea       	ldi	r31, 0xA0	; 160
 38c:	4f 2e       	mov	r4, r31
 38e:	f6 e8       	ldi	r31, 0x86	; 134
 390:	5f 2e       	mov	r5, r31
 392:	66 24       	eor	r6, r6
 394:	63 94       	inc	r6
 396:	71 2c       	mov	r7, r1
 398:	f0 2d       	mov	r31, r0
	int temp = 0;
	for(int i = 0; i < 10;i++){
		if(i < 2){
			deg = deg*10;
			temp = deg/100;
			deg = deg % 100;
 39a:	0f 2e       	mov	r0, r31
 39c:	f4 e6       	ldi	r31, 0x64	; 100
 39e:	2f 2e       	mov	r2, r31
 3a0:	31 2c       	mov	r3, r1
 3a2:	f0 2d       	mov	r31, r0
 3a4:	0b c0       	rjmp	.+22     	; 0x3bc <_Z10lat_to_degv+0x1aa>
 3a6:	49 81       	ldd	r20, Y+1	; 0x01
 3a8:	5a 81       	ldd	r21, Y+2	; 0x02
 3aa:	4f 5f       	subi	r20, 0xFF	; 255
 3ac:	5f 4f       	sbci	r21, 0xFF	; 255
 3ae:	5a 83       	std	Y+2, r21	; 0x02
 3b0:	49 83       	std	Y+1, r20	; 0x01
 3b2:	0f 5f       	subi	r16, 0xFF	; 255
 3b4:	1f 4f       	sbci	r17, 0xFF	; 255
 3b6:	5f ef       	ldi	r21, 0xFF	; 255
 3b8:	e5 1a       	sub	r14, r21
 3ba:	f5 0a       	sbc	r15, r21
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
	long int min = (lat_int - (deg*10000000));
	min = min / 60;
	//putting the value into an array of string
	int temp = 0;
	for(int i = 0; i < 10;i++){
		if(i < 2){
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	91 05       	cpc	r25, r1
 3c4:	a4 f4       	brge	.+40     	; 0x3ee <_Z10lat_to_degv+0x1dc>
			deg = deg*10;
 3c6:	96 01       	movw	r18, r12
 3c8:	22 0f       	add	r18, r18
 3ca:	33 1f       	adc	r19, r19
 3cc:	cc 0c       	add	r12, r12
 3ce:	dd 1c       	adc	r13, r13
 3d0:	cc 0c       	add	r12, r12
 3d2:	dd 1c       	adc	r13, r13
 3d4:	cc 0c       	add	r12, r12
 3d6:	dd 1c       	adc	r13, r13
 3d8:	c9 01       	movw	r24, r18
 3da:	8c 0d       	add	r24, r12
 3dc:	9d 1d       	adc	r25, r13
			temp = deg/100;
			deg = deg % 100;
 3de:	b1 01       	movw	r22, r2
 3e0:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__divmodhi4>
 3e4:	6c 01       	movw	r12, r24
			Latitude_in_deg[i] = '0' + temp;
 3e6:	60 5d       	subi	r22, 0xD0	; 208
 3e8:	f7 01       	movw	r30, r14
 3ea:	60 83       	st	Z, r22
 3ec:	23 c0       	rjmp	.+70     	; 0x434 <_Z10lat_to_degv+0x222>
		}
		else if(i == 2){
 3ee:	02 97       	sbiw	r24, 0x02	; 2
 3f0:	21 f4       	brne	.+8      	; 0x3fa <_Z10lat_to_degv+0x1e8>
			Latitude_in_deg[i] = '.';
 3f2:	fe e2       	ldi	r31, 0x2E	; 46
 3f4:	f0 93 ba 00 	sts	0x00BA, r31
 3f8:	d6 cf       	rjmp	.-84     	; 0x3a6 <_Z10lat_to_degv+0x194>
		}
		else{
			min = min*10;
 3fa:	88 0c       	add	r8, r8
 3fc:	99 1c       	adc	r9, r9
 3fe:	aa 1c       	adc	r10, r10
 400:	bb 1c       	adc	r11, r11
 402:	d5 01       	movw	r26, r10
 404:	c4 01       	movw	r24, r8
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	aa 1f       	adc	r26, r26
 414:	bb 1f       	adc	r27, r27
 416:	bc 01       	movw	r22, r24
 418:	cd 01       	movw	r24, r26
 41a:	68 0d       	add	r22, r8
 41c:	79 1d       	adc	r23, r9
 41e:	8a 1d       	adc	r24, r10
 420:	9b 1d       	adc	r25, r11
			temp = min/100000;
			min = min%100000;
 422:	a3 01       	movw	r20, r6
 424:	92 01       	movw	r18, r4
 426:	0e 94 84 04 	call	0x908	; 0x908 <__divmodsi4>
 42a:	4b 01       	movw	r8, r22
 42c:	5c 01       	movw	r10, r24
			Latitude_in_deg[i] = '0' + temp;
 42e:	20 5d       	subi	r18, 0xD0	; 208
 430:	f7 01       	movw	r30, r14
 432:	20 83       	st	Z, r18
	int deg = lat_int/10000000;
	long int min = (lat_int - (deg*10000000));
	min = min / 60;
	//putting the value into an array of string
	int temp = 0;
	for(int i = 0; i < 10;i++){
 434:	0a 30       	cpi	r16, 0x0A	; 10
 436:	11 05       	cpc	r17, r1
 438:	0c f4       	brge	.+2      	; 0x43c <_Z10lat_to_degv+0x22a>
 43a:	b5 cf       	rjmp	.-150    	; 0x3a6 <_Z10lat_to_degv+0x194>
			temp = min/100000;
			min = min%100000;
			Latitude_in_deg[i] = '0' + temp;
		}
	}
}
 43c:	28 96       	adiw	r28, 0x08	; 8
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	f8 94       	cli
 442:	de bf       	out	0x3e, r29	; 62
 444:	0f be       	out	0x3f, r0	; 63
 446:	cd bf       	out	0x3d, r28	; 61
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	cf 90       	pop	r12
 458:	bf 90       	pop	r11
 45a:	af 90       	pop	r10
 45c:	9f 90       	pop	r9
 45e:	8f 90       	pop	r8
 460:	7f 90       	pop	r7
 462:	6f 90       	pop	r6
 464:	5f 90       	pop	r5
 466:	4f 90       	pop	r4
 468:	3f 90       	pop	r3
 46a:	2f 90       	pop	r2
 46c:	08 95       	ret

0000046e <_Z11long_to_degv>:

void long_to_deg(){
 46e:	2f 92       	push	r2
 470:	3f 92       	push	r3
 472:	4f 92       	push	r4
 474:	5f 92       	push	r5
 476:	6f 92       	push	r6
 478:	7f 92       	push	r7
 47a:	8f 92       	push	r8
 47c:	9f 92       	push	r9
 47e:	af 92       	push	r10
 480:	bf 92       	push	r11
 482:	cf 92       	push	r12
 484:	df 92       	push	r13
 486:	ef 92       	push	r14
 488:	ff 92       	push	r15
 48a:	0f 93       	push	r16
 48c:	1f 93       	push	r17
 48e:	cf 93       	push	r28
 490:	df 93       	push	r29
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	28 97       	sbiw	r28, 0x08	; 8
 498:	0f b6       	in	r0, 0x3f	; 63
 49a:	f8 94       	cli
 49c:	de bf       	out	0x3e, r29	; 62
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	cd bf       	out	0x3d, r28	; 61
 4a2:	44 24       	eor	r4, r4
 4a4:	43 94       	inc	r4
 4a6:	51 2c       	mov	r5, r1
	long long int long_int = 0;
 4a8:	19 82       	std	Y+1, r1	; 0x01
 4aa:	1a 82       	std	Y+2, r1	; 0x02
 4ac:	1b 82       	std	Y+3, r1	; 0x03
 4ae:	1c 82       	std	Y+4, r1	; 0x04
 4b0:	1d 82       	std	Y+5, r1	; 0x05
 4b2:	1e 82       	std	Y+6, r1	; 0x06
 4b4:	1f 82       	std	Y+7, r1	; 0x07
 4b6:	18 86       	std	Y+8, r1	; 0x08
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <_Z11long_to_degv+0x52>
 4ba:	2f ef       	ldi	r18, 0xFF	; 255
 4bc:	42 1a       	sub	r4, r18
 4be:	52 0a       	sbc	r5, r18
	for (int i = 0;i < 11;i++){
		if (i != 5){
 4c0:	36 e0       	ldi	r19, 0x06	; 6
 4c2:	43 16       	cp	r4, r19
 4c4:	51 04       	cpc	r5, r1
 4c6:	c9 f3       	breq	.-14     	; 0x4ba <_Z11long_to_degv+0x4c>
			long_int = (long_int*10) + to_int(Long[i]);
 4c8:	29 81       	ldd	r18, Y+1	; 0x01
 4ca:	3a 81       	ldd	r19, Y+2	; 0x02
 4cc:	4b 81       	ldd	r20, Y+3	; 0x03
 4ce:	5c 81       	ldd	r21, Y+4	; 0x04
 4d0:	6d 81       	ldd	r22, Y+5	; 0x05
 4d2:	7e 81       	ldd	r23, Y+6	; 0x06
 4d4:	8f 81       	ldd	r24, Y+7	; 0x07
 4d6:	98 85       	ldd	r25, Y+8	; 0x08
 4d8:	01 e0       	ldi	r16, 0x01	; 1
 4da:	0e 94 82 05 	call	0xb04	; 0xb04 <__ashldi3>
 4de:	62 2e       	mov	r6, r18
 4e0:	73 2e       	mov	r7, r19
 4e2:	84 2e       	mov	r8, r20
 4e4:	95 2e       	mov	r9, r21
 4e6:	b6 2f       	mov	r27, r22
 4e8:	a7 2f       	mov	r26, r23
 4ea:	f8 2f       	mov	r31, r24
 4ec:	e9 2f       	mov	r30, r25
 4ee:	02 e0       	ldi	r16, 0x02	; 2
 4f0:	0e 94 82 05 	call	0xb04	; 0xb04 <__ashldi3>
 4f4:	a2 2e       	mov	r10, r18
 4f6:	b3 2e       	mov	r11, r19
 4f8:	c4 2e       	mov	r12, r20
 4fa:	d5 2e       	mov	r13, r21
 4fc:	e6 2e       	mov	r14, r22
 4fe:	f7 2e       	mov	r15, r23
 500:	08 2f       	mov	r16, r24
 502:	19 2f       	mov	r17, r25
 504:	26 2d       	mov	r18, r6
 506:	37 2d       	mov	r19, r7
 508:	48 2d       	mov	r20, r8
 50a:	59 2d       	mov	r21, r9
 50c:	6b 2f       	mov	r22, r27
 50e:	7a 2f       	mov	r23, r26
 510:	8f 2f       	mov	r24, r31
 512:	9e 2f       	mov	r25, r30
 514:	0e 94 9b 05 	call	0xb36	; 0xb36 <__adddi3>
 518:	72 2e       	mov	r7, r18
 51a:	83 2e       	mov	r8, r19
 51c:	94 2e       	mov	r9, r20
 51e:	c5 2e       	mov	r12, r21
 520:	d6 2e       	mov	r13, r22
 522:	e7 2e       	mov	r14, r23
 524:	f8 2e       	mov	r15, r24
 526:	09 2f       	mov	r16, r25
 528:	f2 01       	movw	r30, r4
 52a:	eb 59       	subi	r30, 0x9B	; 155
 52c:	ff 4f       	sbci	r31, 0xFF	; 255
 52e:	80 81       	ld	r24, Z
 530:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <_Z6to_intc>
 534:	b9 2e       	mov	r11, r25
 536:	a8 2e       	mov	r10, r24
 538:	19 2f       	mov	r17, r25
 53a:	11 0f       	add	r17, r17
 53c:	11 0b       	sbc	r17, r17
 53e:	27 2d       	mov	r18, r7
 540:	38 2d       	mov	r19, r8
 542:	49 2d       	mov	r20, r9
 544:	5c 2d       	mov	r21, r12
 546:	6d 2d       	mov	r22, r13
 548:	7e 2d       	mov	r23, r14
 54a:	8f 2d       	mov	r24, r15
 54c:	90 2f       	mov	r25, r16
 54e:	c1 2e       	mov	r12, r17
 550:	d1 2e       	mov	r13, r17
 552:	e1 2e       	mov	r14, r17
 554:	f1 2e       	mov	r15, r17
 556:	01 2f       	mov	r16, r17
 558:	0e 94 9b 05 	call	0xb36	; 0xb36 <__adddi3>
 55c:	29 83       	std	Y+1, r18	; 0x01
 55e:	3a 83       	std	Y+2, r19	; 0x02
 560:	4b 83       	std	Y+3, r20	; 0x03
 562:	5c 83       	std	Y+4, r21	; 0x04
 564:	6d 83       	std	Y+5, r22	; 0x05
 566:	7e 83       	std	Y+6, r23	; 0x06
 568:	8f 83       	std	Y+7, r24	; 0x07
 56a:	98 87       	std	Y+8, r25	; 0x08
	}
}

void long_to_deg(){
	long long int long_int = 0;
	for (int i = 0;i < 11;i++){
 56c:	4b e0       	ldi	r20, 0x0B	; 11
 56e:	44 16       	cp	r4, r20
 570:	51 04       	cpc	r5, r1
 572:	0c f4       	brge	.+2      	; 0x576 <_Z11long_to_degv+0x108>
 574:	a2 cf       	rjmp	.-188    	; 0x4ba <_Z11long_to_degv+0x4c>
		}
		else{
			//do nothing
		}
	}
	int deg = long_int/10000000;
 576:	68 94       	set
 578:	aa 24       	eor	r10, r10
 57a:	a7 f8       	bld	r10, 7
 57c:	0f 2e       	mov	r0, r31
 57e:	f6 e9       	ldi	r31, 0x96	; 150
 580:	bf 2e       	mov	r11, r31
 582:	f0 2d       	mov	r31, r0
 584:	0f 2e       	mov	r0, r31
 586:	f8 e9       	ldi	r31, 0x98	; 152
 588:	cf 2e       	mov	r12, r31
 58a:	f0 2d       	mov	r31, r0
 58c:	d1 2c       	mov	r13, r1
 58e:	e1 2c       	mov	r14, r1
 590:	f1 2c       	mov	r15, r1
 592:	00 e0       	ldi	r16, 0x00	; 0
 594:	10 e0       	ldi	r17, 0x00	; 0
 596:	4b 81       	ldd	r20, Y+3	; 0x03
 598:	0e 94 ad 04 	call	0x95a	; 0x95a <__divdi3>
 59c:	a2 2f       	mov	r26, r18
 59e:	b3 2f       	mov	r27, r19
 5a0:	c2 2e       	mov	r12, r18
 5a2:	d3 2e       	mov	r13, r19
	long int min = (long_int - (deg*10000000));
 5a4:	20 e8       	ldi	r18, 0x80	; 128
 5a6:	39 e6       	ldi	r19, 0x69	; 105
 5a8:	47 e6       	ldi	r20, 0x67	; 103
 5aa:	5f ef       	ldi	r21, 0xFF	; 255
 5ac:	0e 94 a3 04 	call	0x946	; 0x946 <__mulshisi3>
 5b0:	29 81       	ldd	r18, Y+1	; 0x01
 5b2:	3a 81       	ldd	r19, Y+2	; 0x02
 5b4:	4b 81       	ldd	r20, Y+3	; 0x03
 5b6:	5c 81       	ldd	r21, Y+4	; 0x04
 5b8:	62 0f       	add	r22, r18
 5ba:	73 1f       	adc	r23, r19
 5bc:	84 1f       	adc	r24, r20
 5be:	95 1f       	adc	r25, r21
	min = min / 60;
 5c0:	2c e3       	ldi	r18, 0x3C	; 60
 5c2:	30 e0       	ldi	r19, 0x00	; 0
 5c4:	40 e0       	ldi	r20, 0x00	; 0
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	0e 94 84 04 	call	0x908	; 0x908 <__divmodsi4>
 5cc:	49 01       	movw	r8, r18
 5ce:	5a 01       	movw	r10, r20
 5d0:	0f 2e       	mov	r0, r31
 5d2:	fd ea       	ldi	r31, 0xAD	; 173
 5d4:	ef 2e       	mov	r14, r31
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	ff 2e       	mov	r15, r31
 5da:	f0 2d       	mov	r31, r0
 5dc:	01 e0       	ldi	r16, 0x01	; 1
 5de:	10 e0       	ldi	r17, 0x00	; 0
 5e0:	1a 82       	std	Y+2, r1	; 0x02
 5e2:	19 82       	std	Y+1, r1	; 0x01
			Longitude_in_deg[i] = '.';
		}
		else{
			min = min*10;
			temp = min/100000;
			min = min%100000;
 5e4:	0f 2e       	mov	r0, r31
 5e6:	f0 ea       	ldi	r31, 0xA0	; 160
 5e8:	4f 2e       	mov	r4, r31
 5ea:	f6 e8       	ldi	r31, 0x86	; 134
 5ec:	5f 2e       	mov	r5, r31
 5ee:	66 24       	eor	r6, r6
 5f0:	63 94       	inc	r6
 5f2:	71 2c       	mov	r7, r1
 5f4:	f0 2d       	mov	r31, r0
	int temp = 0;
	for(int i = 0; i < 10;i++){
		if(i < 2){
			deg = deg*10;
			temp = deg/100;
			deg = deg % 100;
 5f6:	0f 2e       	mov	r0, r31
 5f8:	f4 e6       	ldi	r31, 0x64	; 100
 5fa:	2f 2e       	mov	r2, r31
 5fc:	31 2c       	mov	r3, r1
 5fe:	f0 2d       	mov	r31, r0
 600:	0b c0       	rjmp	.+22     	; 0x618 <_Z11long_to_degv+0x1aa>
 602:	49 81       	ldd	r20, Y+1	; 0x01
 604:	5a 81       	ldd	r21, Y+2	; 0x02
 606:	4f 5f       	subi	r20, 0xFF	; 255
 608:	5f 4f       	sbci	r21, 0xFF	; 255
 60a:	5a 83       	std	Y+2, r21	; 0x02
 60c:	49 83       	std	Y+1, r20	; 0x01
 60e:	0f 5f       	subi	r16, 0xFF	; 255
 610:	1f 4f       	sbci	r17, 0xFF	; 255
 612:	5f ef       	ldi	r21, 0xFF	; 255
 614:	e5 1a       	sub	r14, r21
 616:	f5 0a       	sbc	r15, r21
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	9a 81       	ldd	r25, Y+2	; 0x02
	long int min = (long_int - (deg*10000000));
	min = min / 60;
	//putting final value into array
	int temp = 0;
	for(int i = 0; i < 10;i++){
		if(i < 2){
 61c:	82 30       	cpi	r24, 0x02	; 2
 61e:	91 05       	cpc	r25, r1
 620:	a4 f4       	brge	.+40     	; 0x64a <_Z11long_to_degv+0x1dc>
			deg = deg*10;
 622:	96 01       	movw	r18, r12
 624:	22 0f       	add	r18, r18
 626:	33 1f       	adc	r19, r19
 628:	cc 0c       	add	r12, r12
 62a:	dd 1c       	adc	r13, r13
 62c:	cc 0c       	add	r12, r12
 62e:	dd 1c       	adc	r13, r13
 630:	cc 0c       	add	r12, r12
 632:	dd 1c       	adc	r13, r13
 634:	c9 01       	movw	r24, r18
 636:	8c 0d       	add	r24, r12
 638:	9d 1d       	adc	r25, r13
			temp = deg/100;
			deg = deg % 100;
 63a:	b1 01       	movw	r22, r2
 63c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <__divmodhi4>
 640:	6c 01       	movw	r12, r24
			Longitude_in_deg[i] = '0' + temp;
 642:	60 5d       	subi	r22, 0xD0	; 208
 644:	f7 01       	movw	r30, r14
 646:	60 83       	st	Z, r22
 648:	23 c0       	rjmp	.+70     	; 0x690 <_Z11long_to_degv+0x222>
		}
		else if(i == 2){
 64a:	02 97       	sbiw	r24, 0x02	; 2
 64c:	21 f4       	brne	.+8      	; 0x656 <_Z11long_to_degv+0x1e8>
			Longitude_in_deg[i] = '.';
 64e:	fe e2       	ldi	r31, 0x2E	; 46
 650:	f0 93 af 00 	sts	0x00AF, r31
 654:	d6 cf       	rjmp	.-84     	; 0x602 <_Z11long_to_degv+0x194>
		}
		else{
			min = min*10;
 656:	88 0c       	add	r8, r8
 658:	99 1c       	adc	r9, r9
 65a:	aa 1c       	adc	r10, r10
 65c:	bb 1c       	adc	r11, r11
 65e:	d5 01       	movw	r26, r10
 660:	c4 01       	movw	r24, r8
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	aa 1f       	adc	r26, r26
 668:	bb 1f       	adc	r27, r27
 66a:	88 0f       	add	r24, r24
 66c:	99 1f       	adc	r25, r25
 66e:	aa 1f       	adc	r26, r26
 670:	bb 1f       	adc	r27, r27
 672:	bc 01       	movw	r22, r24
 674:	cd 01       	movw	r24, r26
 676:	68 0d       	add	r22, r8
 678:	79 1d       	adc	r23, r9
 67a:	8a 1d       	adc	r24, r10
 67c:	9b 1d       	adc	r25, r11
			temp = min/100000;
			min = min%100000;
 67e:	a3 01       	movw	r20, r6
 680:	92 01       	movw	r18, r4
 682:	0e 94 84 04 	call	0x908	; 0x908 <__divmodsi4>
 686:	4b 01       	movw	r8, r22
 688:	5c 01       	movw	r10, r24
			Longitude_in_deg[i] = '0' + temp;
 68a:	20 5d       	subi	r18, 0xD0	; 208
 68c:	f7 01       	movw	r30, r14
 68e:	20 83       	st	Z, r18
	int deg = long_int/10000000;
	long int min = (long_int - (deg*10000000));
	min = min / 60;
	//putting final value into array
	int temp = 0;
	for(int i = 0; i < 10;i++){
 690:	0a 30       	cpi	r16, 0x0A	; 10
 692:	11 05       	cpc	r17, r1
 694:	0c f4       	brge	.+2      	; 0x698 <_Z11long_to_degv+0x22a>
 696:	b5 cf       	rjmp	.-150    	; 0x602 <_Z11long_to_degv+0x194>
			temp = min/100000;
			min = min%100000;
			Longitude_in_deg[i] = '0' + temp;
		}
	}
}
 698:	28 96       	adiw	r28, 0x08	; 8
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	f8 94       	cli
 69e:	de bf       	out	0x3e, r29	; 62
 6a0:	0f be       	out	0x3f, r0	; 63
 6a2:	cd bf       	out	0x3d, r28	; 61
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	ef 90       	pop	r14
 6b0:	df 90       	pop	r13
 6b2:	cf 90       	pop	r12
 6b4:	bf 90       	pop	r11
 6b6:	af 90       	pop	r10
 6b8:	9f 90       	pop	r9
 6ba:	8f 90       	pop	r8
 6bc:	7f 90       	pop	r7
 6be:	6f 90       	pop	r6
 6c0:	5f 90       	pop	r5
 6c2:	4f 90       	pop	r4
 6c4:	3f 90       	pop	r3
 6c6:	2f 90       	pop	r2
 6c8:	08 95       	ret

000006ca <_Z14Display_on_LCDv>:

void Display_on_LCD()
{
	LCD_Clear();
 6ca:	0e 94 c7 00 	call	0x18e	; 0x18e <_Z9LCD_Clearv>
	LCD_String("Lat: ");	// Write string on 1st line of LCD
 6ce:	8b e7       	ldi	r24, 0x7B	; 123
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 a9 00 	call	0x152	; 0x152 <_Z10LCD_StringPc>
	LCD_String(Lat_deg);
 6d6:	80 91 64 00 	lds	r24, 0x0064
 6da:	90 91 65 00 	lds	r25, 0x0065
 6de:	0e 94 b8 00 	call	0x170	; 0x170 <_Z10LCD_StringPh>
}

void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
 6e2:	8e e8       	ldi	r24, 0x8E	; 142
 6e4:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
 6e8:	81 e8       	ldi	r24, 0x81	; 129
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 a9 00 	call	0x152	; 0x152 <_Z10LCD_StringPc>
{
	LCD_Clear();
	LCD_String("Lat: ");	// Write string on 1st line of LCD
	LCD_String(Lat_deg);
	LCD_String_xy (0, 14,"'N");	
	LCD_Command(0xC0);		//Go to 2nd line
 6f0:	80 ec       	ldi	r24, 0xC0	; 192
 6f2:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	LCD_String("Long:");	//Write string on 2nd line
 6f6:	84 e8       	ldi	r24, 0x84	; 132
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 a9 00 	call	0x152	; 0x152 <_Z10LCD_StringPc>
	LCD_String(Long_deg);
 6fe:	80 91 62 00 	lds	r24, 0x0062
 702:	90 91 63 00 	lds	r25, 0x0063
 706:	0e 94 b8 00 	call	0x170	; 0x170 <_Z10LCD_StringPh>
void LCD_String_xy (char row, char pos, char *str)	/* Send string to LCD with xy position */
{
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 70a:	8e ec       	ldi	r24, 0xCE	; 206
 70c:	0e 94 49 00 	call	0x92	; 0x92 <_Z11LCD_Commandh>
	LCD_String(str);		/* Call LCD string function */
 710:	8a e8       	ldi	r24, 0x8A	; 138
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 a9 00 	call	0x152	; 0x152 <_Z10LCD_StringPc>
 718:	08 95       	ret

0000071a <_Z14Convert_to_Degv>:
	LCD_String_xy (1, 14,"'E");	
}

void Convert_to_Deg()
{
	lat_to_deg();
 71a:	0e 94 09 01 	call	0x212	; 0x212 <_Z10lat_to_degv>
	long_to_deg();
 71e:	0e 94 37 02 	call	0x46e	; 0x46e <_Z11long_to_degv>
 722:	08 95       	ret

00000724 <_Z16Make_Data_Stringv>:
}
 
void Make_Data_String()
{
 724:	e8 eb       	ldi	r30, 0xB8	; 184
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	a8 e9       	ldi	r26, 0x98	; 152
 72a:	b0 e0       	ldi	r27, 0x00	; 0
 72c:	22 ec       	ldi	r18, 0xC2	; 194
 72e:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 10;i++){
		Data[i] = Latitude_in_deg[i];
 730:	81 91       	ld	r24, Z+
 732:	8d 93       	st	X+, r24
	long_to_deg();
}
 
void Make_Data_String()
{
	for(int i = 0; i < 10;i++){
 734:	e2 17       	cp	r30, r18
 736:	f3 07       	cpc	r31, r19
 738:	d9 f7       	brne	.-10     	; 0x730 <_Z16Make_Data_Stringv+0xc>
		Data[i] = Latitude_in_deg[i];
	}
	Data[10] = ',';
 73a:	8c e2       	ldi	r24, 0x2C	; 44
 73c:	80 93 a2 00 	sts	0x00A2, r24
 740:	ad ea       	ldi	r26, 0xAD	; 173
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	e3 ea       	ldi	r30, 0xA3	; 163
 746:	f0 e0       	ldi	r31, 0x00	; 0
 748:	2d ea       	ldi	r18, 0xAD	; 173
 74a:	30 e0       	ldi	r19, 0x00	; 0
	 int j = 0;
	for(int i = 11; i < 21; i++){
		Data[i] = Longitude_in_deg[j];
 74c:	8d 91       	ld	r24, X+
 74e:	81 93       	st	Z+, r24
	for(int i = 0; i < 10;i++){
		Data[i] = Latitude_in_deg[i];
	}
	Data[10] = ',';
	 int j = 0;
	for(int i = 11; i < 21; i++){
 750:	e2 17       	cp	r30, r18
 752:	f3 07       	cpc	r31, r19
 754:	d9 f7       	brne	.-10     	; 0x74c <_Z16Make_Data_Stringv+0x28>
		Data[i] = Longitude_in_deg[j];
		j++;
	}
}
 756:	08 95       	ret

00000758 <_Z9USARTInitv>:

void USARTInit()
{
	UBRRL = 0xC;
 758:	8c e0       	ldi	r24, 0x0C	; 12
 75a:	89 b9       	out	0x09, r24	; 9
	UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
 75c:	86 e8       	ldi	r24, 0x86	; 134
 75e:	80 bd       	out	0x20, r24	; 32
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXCIE);
 760:	88 e9       	ldi	r24, 0x98	; 152
 762:	8a b9       	out	0x0a, r24	; 10
 764:	08 95       	ret

00000766 <_Z14USARTWriteCharc>:
}

void USARTWriteChar(char data)
{
	while(!(UCSRA & (1<<UDRE)));
 766:	5d 9b       	sbis	0x0b, 5	; 11
 768:	fe cf       	rjmp	.-4      	; 0x766 <_Z14USARTWriteCharc>
	UDR=data;
 76a:	8c b9       	out	0x0c, r24	; 12
 76c:	08 95       	ret

0000076e <_Z20USART_StringTransmitPh>:
}

void USART_StringTransmit(unsigned char* s)
{
 76e:	0f 93       	push	r16
 770:	1f 93       	push	r17
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	ec 01       	movw	r28, r24
 778:	8c 01       	movw	r16, r24
 77a:	0b 5e       	subi	r16, 0xEB	; 235
 77c:	1f 4f       	sbci	r17, 0xFF	; 255
	for(int i = 0; i < 21 ; i++){
		USARTWriteChar(s[i]);
 77e:	89 91       	ld	r24, Y+
 780:	0e 94 b3 03 	call	0x766	; 0x766 <_Z14USARTWriteCharc>
	UDR=data;
}

void USART_StringTransmit(unsigned char* s)
{
	for(int i = 0; i < 21 ; i++){
 784:	c0 17       	cp	r28, r16
 786:	d1 07       	cpc	r29, r17
 788:	d1 f7       	brne	.-12     	; 0x77e <_Z20USART_StringTransmitPh+0x10>
		USARTWriteChar(s[i]);
	}
}
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	08 95       	ret

00000794 <__vector_13>:
ISR(USART_RXC_vect)
{
 794:	1f 92       	push	r1
 796:	0f 92       	push	r0
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	0f 92       	push	r0
 79c:	11 24       	eor	r1, r1
 79e:	2f 93       	push	r18
 7a0:	3f 93       	push	r19
 7a2:	4f 93       	push	r20
 7a4:	5f 93       	push	r21
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	ef 93       	push	r30
 7ac:	ff 93       	push	r31
	char received_char = UDR;
 7ae:	8c b1       	in	r24, 0x0c	; 12
	
	if(received_char =='$'){                 // check for '$'
 7b0:	84 32       	cpi	r24, 0x24	; 36
 7b2:	79 f4       	brne	.+30     	; 0x7d2 <__vector_13+0x3e>
		Latitude_Index = 0;
 7b4:	10 92 97 00 	sts	0x0097, r1
 7b8:	10 92 96 00 	sts	0x0096, r1
		Longitude_Index = 0;
 7bc:	10 92 95 00 	sts	0x0095, r1
 7c0:	10 92 94 00 	sts	0x0094, r1
		CommaCounter = 0;
 7c4:	10 92 93 00 	sts	0x0093, r1
 7c8:	10 92 92 00 	sts	0x0092, r1
		IsItGGAString = false;
 7cc:	10 92 91 00 	sts	0x0091, r1
 7d0:	56 c0       	rjmp	.+172    	; 0x87e <__stack+0x1f>
	}
	else if(IsItGGAString == true){          // if true save GGA info. into buffer
 7d2:	90 91 91 00 	lds	r25, 0x0091
 7d6:	99 23       	and	r25, r25
 7d8:	b1 f1       	breq	.+108    	; 0x846 <__vector_13+0xb2>
		if(received_char == ',' ){
 7da:	8c 32       	cpi	r24, 0x2C	; 44
 7dc:	51 f4       	brne	.+20     	; 0x7f2 <__vector_13+0x5e>
			CommaCounter++;    // increment comma counter
 7de:	20 91 92 00 	lds	r18, 0x0092
 7e2:	30 91 93 00 	lds	r19, 0x0093
 7e6:	2f 5f       	subi	r18, 0xFF	; 255
 7e8:	3f 4f       	sbci	r19, 0xFF	; 255
 7ea:	30 93 93 00 	sts	0x0093, r19
 7ee:	20 93 92 00 	sts	0x0092, r18
		}
		if(CommaCounter == 2){
 7f2:	20 91 92 00 	lds	r18, 0x0092
 7f6:	30 91 93 00 	lds	r19, 0x0093
 7fa:	22 30       	cpi	r18, 0x02	; 2
 7fc:	31 05       	cpc	r19, r1
 7fe:	81 f4       	brne	.+32     	; 0x820 <__vector_13+0x8c>
			Lat[Latitude_Index++] = received_char;
 800:	20 91 96 00 	lds	r18, 0x0096
 804:	30 91 97 00 	lds	r19, 0x0097
 808:	a9 01       	movw	r20, r18
 80a:	4f 5f       	subi	r20, 0xFF	; 255
 80c:	5f 4f       	sbci	r21, 0xFF	; 255
 80e:	50 93 97 00 	sts	0x0097, r21
 812:	40 93 96 00 	sts	0x0096, r20
 816:	f9 01       	movw	r30, r18
 818:	ef 58       	subi	r30, 0x8F	; 143
 81a:	ff 4f       	sbci	r31, 0xFF	; 255
 81c:	80 83       	st	Z, r24
 81e:	2f c0       	rjmp	.+94     	; 0x87e <__stack+0x1f>
		}
		if(CommaCounter == 4){
 820:	24 30       	cpi	r18, 0x04	; 4
 822:	31 05       	cpc	r19, r1
 824:	61 f5       	brne	.+88     	; 0x87e <__stack+0x1f>
			Long[Longitude_Index++] = received_char;
 826:	20 91 94 00 	lds	r18, 0x0094
 82a:	30 91 95 00 	lds	r19, 0x0095
 82e:	a9 01       	movw	r20, r18
 830:	4f 5f       	subi	r20, 0xFF	; 255
 832:	5f 4f       	sbci	r21, 0xFF	; 255
 834:	50 93 95 00 	sts	0x0095, r21
 838:	40 93 94 00 	sts	0x0094, r20
 83c:	f9 01       	movw	r30, r18
 83e:	ea 59       	subi	r30, 0x9A	; 154
 840:	ff 4f       	sbci	r31, 0xFF	; 255
 842:	80 83       	st	Z, r24
 844:	1c c0       	rjmp	.+56     	; 0x87e <__stack+0x1f>
		}
	}
	else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){    // check for GGA string
 846:	90 91 8e 00 	lds	r25, 0x008E
 84a:	97 34       	cpi	r25, 0x47	; 71
 84c:	89 f4       	brne	.+34     	; 0x870 <__stack+0x11>
 84e:	90 91 8f 00 	lds	r25, 0x008F
 852:	97 34       	cpi	r25, 0x47	; 71
 854:	69 f4       	brne	.+26     	; 0x870 <__stack+0x11>
 856:	90 91 90 00 	lds	r25, 0x0090
 85a:	91 34       	cpi	r25, 0x41	; 65
 85c:	49 f4       	brne	.+18     	; 0x870 <__stack+0x11>
		IsItGGAString = true;
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	80 93 91 00 	sts	0x0091, r24
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
 864:	ee e8       	ldi	r30, 0x8E	; 142
 866:	f0 e0       	ldi	r31, 0x00	; 0
 868:	10 82       	st	Z, r1
 86a:	11 82       	std	Z+1, r1	; 0x01
 86c:	12 82       	std	Z+2, r1	; 0x02
 86e:	07 c0       	rjmp	.+14     	; 0x87e <__stack+0x1f>
	}
	else{
		GGA_CODE[0] = GGA_CODE[1];  GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char;
 870:	ee e8       	ldi	r30, 0x8E	; 142
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	91 81       	ldd	r25, Z+1	; 0x01
 876:	90 83       	st	Z, r25
 878:	92 81       	ldd	r25, Z+2	; 0x02
 87a:	91 83       	std	Z+1, r25	; 0x01
 87c:	82 83       	std	Z+2, r24	; 0x02
	}
}
 87e:	ff 91       	pop	r31
 880:	ef 91       	pop	r30
 882:	9f 91       	pop	r25
 884:	8f 91       	pop	r24
 886:	5f 91       	pop	r21
 888:	4f 91       	pop	r20
 88a:	3f 91       	pop	r19
 88c:	2f 91       	pop	r18
 88e:	0f 90       	pop	r0
 890:	0f be       	out	0x3f, r0	; 63
 892:	0f 90       	pop	r0
 894:	1f 90       	pop	r1
 896:	18 95       	reti

00000898 <main>:

int main()
{
	LCD_Init();			//Initialization of LCD
 898:	0e 94 8b 00 	call	0x116	; 0x116 <_Z8LCD_Initv>
 89c:	2f ef       	ldi	r18, 0xFF	; 255
 89e:	84 e3       	ldi	r24, 0x34	; 52
 8a0:	9c e0       	ldi	r25, 0x0C	; 12
 8a2:	21 50       	subi	r18, 0x01	; 1
 8a4:	80 40       	sbci	r24, 0x00	; 0
 8a6:	90 40       	sbci	r25, 0x00	; 0
 8a8:	e1 f7       	brne	.-8      	; 0x8a2 <main+0xa>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <main+0x14>
 8ac:	00 00       	nop
	_delay_ms(4000);	//wait for GPS Initialization
	USARTInit();
 8ae:	0e 94 ac 03 	call	0x758	; 0x758 <_Z9USARTInitv>
	sei();
 8b2:	78 94       	sei
	while(1){
		Convert_to_Deg();
 8b4:	0e 94 8d 03 	call	0x71a	; 0x71a <_Z14Convert_to_Degv>
		Display_on_LCD();
 8b8:	0e 94 65 03 	call	0x6ca	; 0x6ca <_Z14Display_on_LCDv>
		Make_Data_String();
 8bc:	0e 94 92 03 	call	0x724	; 0x724 <_Z16Make_Data_Stringv>
		USART_StringTransmit(d);
 8c0:	80 91 60 00 	lds	r24, 0x0060
 8c4:	90 91 61 00 	lds	r25, 0x0061
 8c8:	0e 94 b7 03 	call	0x76e	; 0x76e <_Z20USART_StringTransmitPh>
 8cc:	2f e3       	ldi	r18, 0x3F	; 63
 8ce:	8d e0       	ldi	r24, 0x0D	; 13
 8d0:	93 e0       	ldi	r25, 0x03	; 3
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	80 40       	sbci	r24, 0x00	; 0
 8d6:	90 40       	sbci	r25, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <main+0x3a>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <main+0x44>
 8dc:	00 00       	nop
 8de:	ea cf       	rjmp	.-44     	; 0x8b4 <main+0x1c>

000008e0 <__divmodhi4>:
 8e0:	97 fb       	bst	r25, 7
 8e2:	07 2e       	mov	r0, r23
 8e4:	16 f4       	brtc	.+4      	; 0x8ea <__divmodhi4+0xa>
 8e6:	00 94       	com	r0
 8e8:	07 d0       	rcall	.+14     	; 0x8f8 <__divmodhi4_neg1>
 8ea:	77 fd       	sbrc	r23, 7
 8ec:	09 d0       	rcall	.+18     	; 0x900 <__divmodhi4_neg2>
 8ee:	0e 94 a4 05 	call	0xb48	; 0xb48 <__udivmodhi4>
 8f2:	07 fc       	sbrc	r0, 7
 8f4:	05 d0       	rcall	.+10     	; 0x900 <__divmodhi4_neg2>
 8f6:	3e f4       	brtc	.+14     	; 0x906 <__divmodhi4_exit>

000008f8 <__divmodhi4_neg1>:
 8f8:	90 95       	com	r25
 8fa:	81 95       	neg	r24
 8fc:	9f 4f       	sbci	r25, 0xFF	; 255
 8fe:	08 95       	ret

00000900 <__divmodhi4_neg2>:
 900:	70 95       	com	r23
 902:	61 95       	neg	r22
 904:	7f 4f       	sbci	r23, 0xFF	; 255

00000906 <__divmodhi4_exit>:
 906:	08 95       	ret

00000908 <__divmodsi4>:
 908:	05 2e       	mov	r0, r21
 90a:	97 fb       	bst	r25, 7
 90c:	1e f4       	brtc	.+6      	; 0x914 <__divmodsi4+0xc>
 90e:	00 94       	com	r0
 910:	0e 94 9b 04 	call	0x936	; 0x936 <__negsi2>
 914:	57 fd       	sbrc	r21, 7
 916:	07 d0       	rcall	.+14     	; 0x926 <__divmodsi4_neg2>
 918:	0e 94 b8 05 	call	0xb70	; 0xb70 <__udivmodsi4>
 91c:	07 fc       	sbrc	r0, 7
 91e:	03 d0       	rcall	.+6      	; 0x926 <__divmodsi4_neg2>
 920:	4e f4       	brtc	.+18     	; 0x934 <__divmodsi4_exit>
 922:	0c 94 9b 04 	jmp	0x936	; 0x936 <__negsi2>

00000926 <__divmodsi4_neg2>:
 926:	50 95       	com	r21
 928:	40 95       	com	r20
 92a:	30 95       	com	r19
 92c:	21 95       	neg	r18
 92e:	3f 4f       	sbci	r19, 0xFF	; 255
 930:	4f 4f       	sbci	r20, 0xFF	; 255
 932:	5f 4f       	sbci	r21, 0xFF	; 255

00000934 <__divmodsi4_exit>:
 934:	08 95       	ret

00000936 <__negsi2>:
 936:	90 95       	com	r25
 938:	80 95       	com	r24
 93a:	70 95       	com	r23
 93c:	61 95       	neg	r22
 93e:	7f 4f       	sbci	r23, 0xFF	; 255
 940:	8f 4f       	sbci	r24, 0xFF	; 255
 942:	9f 4f       	sbci	r25, 0xFF	; 255
 944:	08 95       	ret

00000946 <__mulshisi3>:
 946:	b7 ff       	sbrs	r27, 7
 948:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__muluhisi3>

0000094c <__mulohisi3>:
 94c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__muluhisi3>
 950:	82 1b       	sub	r24, r18
 952:	93 0b       	sbc	r25, r19
 954:	08 95       	ret

00000956 <__moddi3>:
 956:	68 94       	set
 958:	01 c0       	rjmp	.+2      	; 0x95c <__divdi3_moddi3>

0000095a <__divdi3>:
 95a:	e8 94       	clt

0000095c <__divdi3_moddi3>:
 95c:	f9 2f       	mov	r31, r25
 95e:	f1 2b       	or	r31, r17
 960:	12 f0       	brmi	.+4      	; 0x966 <__divdi3_moddi3+0xa>
 962:	0c 94 df 04 	jmp	0x9be	; 0x9be <__udivdi3_umoddi3>
 966:	a0 e0       	ldi	r26, 0x00	; 0
 968:	b0 e0       	ldi	r27, 0x00	; 0
 96a:	e9 eb       	ldi	r30, 0xB9	; 185
 96c:	f4 e0       	ldi	r31, 0x04	; 4
 96e:	0c 94 51 05 	jmp	0xaa2	; 0xaa2 <__prologue_saves__+0xc>
 972:	09 2e       	mov	r0, r25
 974:	05 94       	asr	r0
 976:	22 f4       	brpl	.+8      	; 0x980 <__divdi3_moddi3+0x24>
 978:	0e 94 3b 05 	call	0xa76	; 0xa76 <__negdi2>
 97c:	11 23       	and	r17, r17
 97e:	92 f4       	brpl	.+36     	; 0x9a4 <__divdi3_moddi3+0x48>
 980:	f0 e8       	ldi	r31, 0x80	; 128
 982:	0f 26       	eor	r0, r31
 984:	ff ef       	ldi	r31, 0xFF	; 255
 986:	e0 94       	com	r14
 988:	f0 94       	com	r15
 98a:	00 95       	com	r16
 98c:	10 95       	com	r17
 98e:	b0 94       	com	r11
 990:	c0 94       	com	r12
 992:	d0 94       	com	r13
 994:	a1 94       	neg	r10
 996:	bf 0a       	sbc	r11, r31
 998:	cf 0a       	sbc	r12, r31
 99a:	df 0a       	sbc	r13, r31
 99c:	ef 0a       	sbc	r14, r31
 99e:	ff 0a       	sbc	r15, r31
 9a0:	0f 0b       	sbc	r16, r31
 9a2:	1f 0b       	sbc	r17, r31
 9a4:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__udivmod64>
 9a8:	07 fc       	sbrc	r0, 7
 9aa:	0e 94 3b 05 	call	0xa76	; 0xa76 <__negdi2>
 9ae:	cd b7       	in	r28, 0x3d	; 61
 9b0:	de b7       	in	r29, 0x3e	; 62
 9b2:	ec e0       	ldi	r30, 0x0C	; 12
 9b4:	0c 94 6d 05 	jmp	0xada	; 0xada <__epilogue_restores__+0xc>

000009b8 <__umoddi3>:
 9b8:	68 94       	set
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <__udivdi3_umoddi3>

000009bc <__udivdi3>:
 9bc:	e8 94       	clt

000009be <__udivdi3_umoddi3>:
 9be:	8f 92       	push	r8
 9c0:	9f 92       	push	r9
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__udivmod64>
 9ca:	df 91       	pop	r29
 9cc:	cf 91       	pop	r28
 9ce:	9f 90       	pop	r9
 9d0:	8f 90       	pop	r8
 9d2:	08 95       	ret

000009d4 <__udivmod64>:
 9d4:	88 24       	eor	r8, r8
 9d6:	99 24       	eor	r9, r9
 9d8:	f4 01       	movw	r30, r8
 9da:	e4 01       	movw	r28, r8
 9dc:	b0 e4       	ldi	r27, 0x40	; 64
 9de:	9f 93       	push	r25
 9e0:	aa 27       	eor	r26, r26
 9e2:	9a 15       	cp	r25, r10
 9e4:	8b 04       	cpc	r8, r11
 9e6:	9c 04       	cpc	r9, r12
 9e8:	ed 05       	cpc	r30, r13
 9ea:	fe 05       	cpc	r31, r14
 9ec:	cf 05       	cpc	r28, r15
 9ee:	d0 07       	cpc	r29, r16
 9f0:	a1 07       	cpc	r26, r17
 9f2:	98 f4       	brcc	.+38     	; 0xa1a <__udivmod64+0x46>
 9f4:	ad 2f       	mov	r26, r29
 9f6:	dc 2f       	mov	r29, r28
 9f8:	cf 2f       	mov	r28, r31
 9fa:	fe 2f       	mov	r31, r30
 9fc:	e9 2d       	mov	r30, r9
 9fe:	98 2c       	mov	r9, r8
 a00:	89 2e       	mov	r8, r25
 a02:	98 2f       	mov	r25, r24
 a04:	87 2f       	mov	r24, r23
 a06:	76 2f       	mov	r23, r22
 a08:	65 2f       	mov	r22, r21
 a0a:	54 2f       	mov	r21, r20
 a0c:	43 2f       	mov	r20, r19
 a0e:	32 2f       	mov	r19, r18
 a10:	22 27       	eor	r18, r18
 a12:	b8 50       	subi	r27, 0x08	; 8
 a14:	31 f7       	brne	.-52     	; 0x9e2 <__udivmod64+0xe>
 a16:	bf 91       	pop	r27
 a18:	27 c0       	rjmp	.+78     	; 0xa68 <__udivmod64+0x94>
 a1a:	1b 2e       	mov	r1, r27
 a1c:	bf 91       	pop	r27
 a1e:	bb 27       	eor	r27, r27
 a20:	22 0f       	add	r18, r18
 a22:	33 1f       	adc	r19, r19
 a24:	44 1f       	adc	r20, r20
 a26:	55 1f       	adc	r21, r21
 a28:	66 1f       	adc	r22, r22
 a2a:	77 1f       	adc	r23, r23
 a2c:	88 1f       	adc	r24, r24
 a2e:	99 1f       	adc	r25, r25
 a30:	88 1c       	adc	r8, r8
 a32:	99 1c       	adc	r9, r9
 a34:	ee 1f       	adc	r30, r30
 a36:	ff 1f       	adc	r31, r31
 a38:	cc 1f       	adc	r28, r28
 a3a:	dd 1f       	adc	r29, r29
 a3c:	aa 1f       	adc	r26, r26
 a3e:	bb 1f       	adc	r27, r27
 a40:	8a 14       	cp	r8, r10
 a42:	9b 04       	cpc	r9, r11
 a44:	ec 05       	cpc	r30, r12
 a46:	fd 05       	cpc	r31, r13
 a48:	ce 05       	cpc	r28, r14
 a4a:	df 05       	cpc	r29, r15
 a4c:	a0 07       	cpc	r26, r16
 a4e:	b1 07       	cpc	r27, r17
 a50:	48 f0       	brcs	.+18     	; 0xa64 <__udivmod64+0x90>
 a52:	8a 18       	sub	r8, r10
 a54:	9b 08       	sbc	r9, r11
 a56:	ec 09       	sbc	r30, r12
 a58:	fd 09       	sbc	r31, r13
 a5a:	ce 09       	sbc	r28, r14
 a5c:	df 09       	sbc	r29, r15
 a5e:	a0 0b       	sbc	r26, r16
 a60:	b1 0b       	sbc	r27, r17
 a62:	21 60       	ori	r18, 0x01	; 1
 a64:	1a 94       	dec	r1
 a66:	e1 f6       	brne	.-72     	; 0xa20 <__udivmod64+0x4c>
 a68:	2e f4       	brtc	.+10     	; 0xa74 <__udivmod64+0xa0>
 a6a:	94 01       	movw	r18, r8
 a6c:	af 01       	movw	r20, r30
 a6e:	be 01       	movw	r22, r28
 a70:	cd 01       	movw	r24, r26
 a72:	00 0c       	add	r0, r0
 a74:	08 95       	ret

00000a76 <__negdi2>:
 a76:	60 95       	com	r22
 a78:	70 95       	com	r23
 a7a:	80 95       	com	r24
 a7c:	90 95       	com	r25
 a7e:	30 95       	com	r19
 a80:	40 95       	com	r20
 a82:	50 95       	com	r21
 a84:	21 95       	neg	r18
 a86:	3f 4f       	sbci	r19, 0xFF	; 255
 a88:	4f 4f       	sbci	r20, 0xFF	; 255
 a8a:	5f 4f       	sbci	r21, 0xFF	; 255
 a8c:	6f 4f       	sbci	r22, 0xFF	; 255
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	08 95       	ret

00000a96 <__prologue_saves__>:
 a96:	2f 92       	push	r2
 a98:	3f 92       	push	r3
 a9a:	4f 92       	push	r4
 a9c:	5f 92       	push	r5
 a9e:	6f 92       	push	r6
 aa0:	7f 92       	push	r7
 aa2:	8f 92       	push	r8
 aa4:	9f 92       	push	r9
 aa6:	af 92       	push	r10
 aa8:	bf 92       	push	r11
 aaa:	cf 92       	push	r12
 aac:	df 92       	push	r13
 aae:	ef 92       	push	r14
 ab0:	ff 92       	push	r15
 ab2:	0f 93       	push	r16
 ab4:	1f 93       	push	r17
 ab6:	cf 93       	push	r28
 ab8:	df 93       	push	r29
 aba:	cd b7       	in	r28, 0x3d	; 61
 abc:	de b7       	in	r29, 0x3e	; 62
 abe:	ca 1b       	sub	r28, r26
 ac0:	db 0b       	sbc	r29, r27
 ac2:	0f b6       	in	r0, 0x3f	; 63
 ac4:	f8 94       	cli
 ac6:	de bf       	out	0x3e, r29	; 62
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	cd bf       	out	0x3d, r28	; 61
 acc:	09 94       	ijmp

00000ace <__epilogue_restores__>:
 ace:	2a 88       	ldd	r2, Y+18	; 0x12
 ad0:	39 88       	ldd	r3, Y+17	; 0x11
 ad2:	48 88       	ldd	r4, Y+16	; 0x10
 ad4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ad6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ad8:	7d 84       	ldd	r7, Y+13	; 0x0d
 ada:	8c 84       	ldd	r8, Y+12	; 0x0c
 adc:	9b 84       	ldd	r9, Y+11	; 0x0b
 ade:	aa 84       	ldd	r10, Y+10	; 0x0a
 ae0:	b9 84       	ldd	r11, Y+9	; 0x09
 ae2:	c8 84       	ldd	r12, Y+8	; 0x08
 ae4:	df 80       	ldd	r13, Y+7	; 0x07
 ae6:	ee 80       	ldd	r14, Y+6	; 0x06
 ae8:	fd 80       	ldd	r15, Y+5	; 0x05
 aea:	0c 81       	ldd	r16, Y+4	; 0x04
 aec:	1b 81       	ldd	r17, Y+3	; 0x03
 aee:	aa 81       	ldd	r26, Y+2	; 0x02
 af0:	b9 81       	ldd	r27, Y+1	; 0x01
 af2:	ce 0f       	add	r28, r30
 af4:	d1 1d       	adc	r29, r1
 af6:	0f b6       	in	r0, 0x3f	; 63
 af8:	f8 94       	cli
 afa:	de bf       	out	0x3e, r29	; 62
 afc:	0f be       	out	0x3f, r0	; 63
 afe:	cd bf       	out	0x3d, r28	; 61
 b00:	ed 01       	movw	r28, r26
 b02:	08 95       	ret

00000b04 <__ashldi3>:
 b04:	0f 93       	push	r16
 b06:	08 30       	cpi	r16, 0x08	; 8
 b08:	90 f0       	brcs	.+36     	; 0xb2e <__ashldi3+0x2a>
 b0a:	98 2f       	mov	r25, r24
 b0c:	87 2f       	mov	r24, r23
 b0e:	76 2f       	mov	r23, r22
 b10:	65 2f       	mov	r22, r21
 b12:	54 2f       	mov	r21, r20
 b14:	43 2f       	mov	r20, r19
 b16:	32 2f       	mov	r19, r18
 b18:	22 27       	eor	r18, r18
 b1a:	08 50       	subi	r16, 0x08	; 8
 b1c:	f4 cf       	rjmp	.-24     	; 0xb06 <__ashldi3+0x2>
 b1e:	22 0f       	add	r18, r18
 b20:	33 1f       	adc	r19, r19
 b22:	44 1f       	adc	r20, r20
 b24:	55 1f       	adc	r21, r21
 b26:	66 1f       	adc	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	88 1f       	adc	r24, r24
 b2c:	99 1f       	adc	r25, r25
 b2e:	0a 95       	dec	r16
 b30:	b2 f7       	brpl	.-20     	; 0xb1e <__ashldi3+0x1a>
 b32:	0f 91       	pop	r16
 b34:	08 95       	ret

00000b36 <__adddi3>:
 b36:	2a 0d       	add	r18, r10
 b38:	3b 1d       	adc	r19, r11
 b3a:	4c 1d       	adc	r20, r12
 b3c:	5d 1d       	adc	r21, r13
 b3e:	6e 1d       	adc	r22, r14
 b40:	7f 1d       	adc	r23, r15
 b42:	80 1f       	adc	r24, r16
 b44:	91 1f       	adc	r25, r17
 b46:	08 95       	ret

00000b48 <__udivmodhi4>:
 b48:	aa 1b       	sub	r26, r26
 b4a:	bb 1b       	sub	r27, r27
 b4c:	51 e1       	ldi	r21, 0x11	; 17
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <__udivmodhi4_ep>

00000b50 <__udivmodhi4_loop>:
 b50:	aa 1f       	adc	r26, r26
 b52:	bb 1f       	adc	r27, r27
 b54:	a6 17       	cp	r26, r22
 b56:	b7 07       	cpc	r27, r23
 b58:	10 f0       	brcs	.+4      	; 0xb5e <__udivmodhi4_ep>
 b5a:	a6 1b       	sub	r26, r22
 b5c:	b7 0b       	sbc	r27, r23

00000b5e <__udivmodhi4_ep>:
 b5e:	88 1f       	adc	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	5a 95       	dec	r21
 b64:	a9 f7       	brne	.-22     	; 0xb50 <__udivmodhi4_loop>
 b66:	80 95       	com	r24
 b68:	90 95       	com	r25
 b6a:	bc 01       	movw	r22, r24
 b6c:	cd 01       	movw	r24, r26
 b6e:	08 95       	ret

00000b70 <__udivmodsi4>:
 b70:	a1 e2       	ldi	r26, 0x21	; 33
 b72:	1a 2e       	mov	r1, r26
 b74:	aa 1b       	sub	r26, r26
 b76:	bb 1b       	sub	r27, r27
 b78:	fd 01       	movw	r30, r26
 b7a:	0d c0       	rjmp	.+26     	; 0xb96 <__udivmodsi4_ep>

00000b7c <__udivmodsi4_loop>:
 b7c:	aa 1f       	adc	r26, r26
 b7e:	bb 1f       	adc	r27, r27
 b80:	ee 1f       	adc	r30, r30
 b82:	ff 1f       	adc	r31, r31
 b84:	a2 17       	cp	r26, r18
 b86:	b3 07       	cpc	r27, r19
 b88:	e4 07       	cpc	r30, r20
 b8a:	f5 07       	cpc	r31, r21
 b8c:	20 f0       	brcs	.+8      	; 0xb96 <__udivmodsi4_ep>
 b8e:	a2 1b       	sub	r26, r18
 b90:	b3 0b       	sbc	r27, r19
 b92:	e4 0b       	sbc	r30, r20
 b94:	f5 0b       	sbc	r31, r21

00000b96 <__udivmodsi4_ep>:
 b96:	66 1f       	adc	r22, r22
 b98:	77 1f       	adc	r23, r23
 b9a:	88 1f       	adc	r24, r24
 b9c:	99 1f       	adc	r25, r25
 b9e:	1a 94       	dec	r1
 ba0:	69 f7       	brne	.-38     	; 0xb7c <__udivmodsi4_loop>
 ba2:	60 95       	com	r22
 ba4:	70 95       	com	r23
 ba6:	80 95       	com	r24
 ba8:	90 95       	com	r25
 baa:	9b 01       	movw	r18, r22
 bac:	ac 01       	movw	r20, r24
 bae:	bd 01       	movw	r22, r26
 bb0:	cf 01       	movw	r24, r30
 bb2:	08 95       	ret

00000bb4 <__muluhisi3>:
 bb4:	0e 94 e5 05 	call	0xbca	; 0xbca <__umulhisi3>
 bb8:	a5 9f       	mul	r26, r21
 bba:	90 0d       	add	r25, r0
 bbc:	b4 9f       	mul	r27, r20
 bbe:	90 0d       	add	r25, r0
 bc0:	a4 9f       	mul	r26, r20
 bc2:	80 0d       	add	r24, r0
 bc4:	91 1d       	adc	r25, r1
 bc6:	11 24       	eor	r1, r1
 bc8:	08 95       	ret

00000bca <__umulhisi3>:
 bca:	a2 9f       	mul	r26, r18
 bcc:	b0 01       	movw	r22, r0
 bce:	b3 9f       	mul	r27, r19
 bd0:	c0 01       	movw	r24, r0
 bd2:	a3 9f       	mul	r26, r19
 bd4:	70 0d       	add	r23, r0
 bd6:	81 1d       	adc	r24, r1
 bd8:	11 24       	eor	r1, r1
 bda:	91 1d       	adc	r25, r1
 bdc:	b2 9f       	mul	r27, r18
 bde:	70 0d       	add	r23, r0
 be0:	81 1d       	adc	r24, r1
 be2:	11 24       	eor	r1, r1
 be4:	91 1d       	adc	r25, r1
 be6:	08 95       	ret

00000be8 <_exit>:
 be8:	f8 94       	cli

00000bea <__stop_program>:
 bea:	ff cf       	rjmp	.-2      	; 0xbea <__stop_program>
